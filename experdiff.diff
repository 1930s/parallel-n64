diff --git a/Makefile b/Makefile
index 88c7250..e80d852 100644
--- a/Makefile
+++ b/Makefile
@@ -3,7 +3,7 @@ PERF_TEST=0
 HAVE_SHARED_CONTEXT=0
 SINGLE_THREAD=0
 WITH_CRC=brumme
-HAVE_OPENGL=1
+HAVE_OPENGL=0
 
 DYNAFLAGS :=
 INCFLAGS  :=
diff --git a/mupen64plus-video-angrylion/n64video_rdp.c b/mupen64plus-video-angrylion/n64video_rdp.c
index 8ec3c11..efe0e30 100644
--- a/mupen64plus-video-angrylion/n64video_rdp.c
+++ b/mupen64plus-video-angrylion/n64video_rdp.c
@@ -51,28 +51,6 @@ NOINLINE static void render_spans(
     int yhlimit, int yllimit, int tilenum, int flip);
 STRICTINLINE static u16 normalize_dzpix(u16 sum);
 
-static void (*const rdp_command_table[64])(void) = {
-    noop              ,invalid           ,invalid           ,invalid           ,
-    invalid           ,invalid           ,invalid           ,invalid           ,
-    tri_noshade       ,tri_noshade_z     ,tri_tex           ,tri_tex_z         ,
-    tri_shade         ,tri_shade_z       ,tri_texshade      ,tri_texshade_z    ,
-
-    invalid           ,invalid           ,invalid           ,invalid           ,
-    invalid           ,invalid           ,invalid           ,invalid           ,
-    invalid           ,invalid           ,invalid           ,invalid           ,
-    invalid           ,invalid           ,invalid           ,invalid           ,
-
-    invalid           ,invalid           ,invalid           ,invalid           ,
-    tex_rect          ,tex_rect_flip     ,sync_load         ,sync_pipe         ,
-    sync_tile         ,sync_full         ,set_key_gb        ,set_key_r         ,
-    set_convert       ,set_scissor       ,set_prim_depth    ,set_other_modes   ,
-
-    load_tlut         ,invalid           ,set_tile_size     ,load_block        ,
-    load_tile         ,set_tile          ,fill_rect         ,set_fill_color    ,
-    set_fog_color     ,set_blend_color   ,set_prim_color    ,set_env_color     ,
-    set_combine       ,set_texture_image ,set_mask_image    ,set_color_image   ,
-};
-
 static const int DP_CMD_LEN_W[64] = { /* command length, in DP FIFO words */
     (8) / 8          ,(8) / 8          ,(8) / 8          ,(8) / 8          ,
     (8) / 8          ,(8) / 8          ,(8) / 8          ,(8) / 8          ,
@@ -237,17 +215,190 @@ void process_RDP_list(void)
 
     while (cmd_cur - cmd_ptr < 0)
     {
-        int command, cmd_length;
-
-        command = (cmd_data[cmd_cur + 0].UW32[0] >> 24) % 64;
-        cmd_length = sizeof(i64)/sizeof(i64) * DP_CMD_LEN_W[command];
+       UINT32 w1      = cmd_data[cmd_cur + 0].UW32[0];
+       UINT32 w2      = cmd_data[cmd_cur + 0].UW32[1];
+       int command    = (w1 >> 24) % 64;
+       int cmd_length = sizeof(i64)/sizeof(i64) * DP_CMD_LEN_W[command];
 #ifdef TRACE_DP_COMMANDS
-        ++cmd_count[command];
+       ++cmd_count[command];
 #endif
-        if (cmd_ptr - cmd_cur - cmd_length < 0)
-            goto exit_b;
-        rdp_command_table[command]();
-        cmd_cur += cmd_length;
+       if (cmd_ptr - cmd_cur - cmd_length < 0)
+          goto exit_b;
+
+       if (
+             (command >= 1    && command <= 7)
+             || (command >= 0x10 && command <= 0x23)
+          )
+       {
+          invalid();
+       }
+       else
+       {
+          switch (command)
+          {
+             case 49:
+                invalid();
+                break;
+             case 8:
+                draw_triangle(SHADE_NO, TEXTURE_NO, ZBUFFER_NO);
+                break;
+             case 9:
+                draw_triangle(SHADE_NO, TEXTURE_NO, ZBUFFER_YES);
+                break;
+             case 10:
+                draw_triangle(SHADE_NO, TEXTURE_YES, ZBUFFER_NO);
+                break;
+             case 11:
+                draw_triangle(SHADE_NO, TEXTURE_YES, ZBUFFER_YES);
+                break;
+             case 12:
+                draw_triangle(SHADE_YES, TEXTURE_NO, ZBUFFER_NO);
+                break;
+             case 13:
+                draw_triangle(SHADE_YES, TEXTURE_NO, ZBUFFER_YES);
+                break;
+             case 14:
+                draw_triangle(SHADE_YES, TEXTURE_YES, ZBUFFER_NO);
+                break;
+             case 15:
+                draw_triangle(SHADE_YES, TEXTURE_YES, ZBUFFER_YES);
+                break;
+             case 36:
+                tex_rect();
+                break;
+             case 37:
+                tex_rect_flip();
+                break;
+             case 38: /* SYNC_LOAD */
+                break;
+             case 39: /* SYNC_PIPE */
+                break;
+             case 40: /* SYNC_TILE */
+                break;
+             case 41: /* SYNC_FULL */
+                z64gl_command = 0; /* wtf is this for */
+                *gfx_info.MI_INTR_REG |= DP_INTERRUPT;
+                gfx_info.CheckInterrupts();
+                break;
+             case 42: /* SET_KEY_GB */
+                key_width.g  = (w1 & 0x00FFF000) >> 12;
+                key_width.b  = (w1 & 0x00000FFF) >>  0;
+                key_center.g = (w2 & 0xFF000000) >> 24;
+                key_scale.g  = (w2 & 0x00FF0000) >> 16;
+                key_center.b = (w2 & 0x0000FF00) >>  8;
+                key_scale.b  = (w2 & 0x000000FF) >>  0;
+                break;
+             case 43: /* SET_KEY_R */
+                key_width.r  = (w2 & 0x0FFF0000) >> 16;
+                key_center.r = (w2 & 0x0000FF00) >>  8;
+                key_scale.r  = (w2 & 0x000000FF) >>  0;
+                break;
+             case 44: /* SET_CONVERT */
+                {
+                   INT32 k0 = (w1 >> 13) & 0x1ff;
+                   INT32 k1 = (w1 >> 4) & 0x1ff;
+                   INT32 k2 = ((w1 & 0xf) << 5) | ((w2 >> 27) & 0x1f);
+                   INT32 k3 = (w2 >> 18) & 0x1ff;
+                   k0_tf = (SIGN(k0, 9) << 1) + 1;
+                   k1_tf = (SIGN(k1, 9) << 1) + 1;
+                   k2_tf = (SIGN(k2, 9) << 1) + 1;
+                   k3_tf = (SIGN(k3, 9) << 1) + 1;
+                   k4 = (w2 >> 9) & 0x1ff;
+                   k5 = w2 & 0x1ff;
+                }
+                break;
+             case 45: /* SET_SCISSOR */
+                __clip.xh   = (w1 & 0x00FFF000) >> (44 - 32);
+                __clip.yh   = (w1 & 0x00000FFF) >> (32 - 32);
+                scfield   = (w2 & 0x02000000) >> (25 -  0);
+                sckeepodd = (w2 & 0x01000000) >> (24 -  0);
+                __clip.xl   = (w2 & 0x00FFF000) >> (12 -  0);
+                __clip.yl   = (w2 & 0x00000FFF) >> ( 0 -  0);
+                break;
+             case 46: /* SET_PRIM_DEPTH */
+                primitive_z       = (w2 & 0xFFFF0000) >> 16;
+                primitive_delta_z = (w2 & 0x0000FFFF) >>  0;
+                primitive_z = (primitive_z & 0x7FFF) << 16; /* angrylion does this why? */
+                break;
+             case 47: /* SET_OTHER_MDOE */
+                set_other_modes();
+                break;
+             case 48: /* LOAD_TLUT */
+                tile_tlut_common_cs_decoder(w1, w2);
+                break;
+             case 50: /* SET_TILE_SIZE */
+                set_tile_size();
+                break;
+             case 51: /* LOAD_BLOCK */
+                load_block();
+                break;
+             case 52: /* LOAD_TILE */
+                tile_tlut_common_cs_decoder(w1, w2);
+                break;
+             case 53: /* SET_TILE */
+                set_tile();
+                break;
+             case 54: /* FILL_RECT */
+                fill_rect();
+                break;
+             case 55: /* SET_FILL_COLOR */
+                fill_color = w2;
+                break;
+             case 56: /* SET_FOG_COLOR */
+                fog_color.r = (w2 & 0xFF000000) >> 24;
+                fog_color.g = (w2 & 0x00FF0000) >> 16;
+                fog_color.b = (w2 & 0x0000FF00) >>  8;
+                fog_color.a = (w2 & 0x000000FF) >>  0;
+                break;
+             case 57: /* SET_BLEND_COLOR */
+                blend_color.r = (w2 & 0xFF000000) >> 24;
+                blend_color.g = (w2 & 0x00FF0000) >> 16;
+                blend_color.b = (w2 & 0x0000FF00) >>  8;
+                blend_color.a = (w2 & 0x000000FF) >>  0;
+                break;
+             case 58: /* SET_PRIM_COLOR */
+                min_level          = (w1 & 0x00001F00) >>(40-32);
+                primitive_lod_frac = (w1 & 0x000000FF) >>(32-32);
+                prim_color.r       = (w2 & 0xFF000000) >> 24;
+                prim_color.g       = (w2 & 0x00FF0000) >> 16;
+                prim_color.b       = (w2 & 0x0000FF00) >>  8;
+                prim_color.a       = (w2 & 0x000000FF) >>  0;
+                break;
+             case 59: /* SET_ENV_COLOR */
+                env_color.r = (w1 & 0xFF000000) >> 24;
+                env_color.g = (w1 & 0x00FF0000) >> 16;
+                env_color.b = (w1 & 0x0000FF00) >>  8;
+                env_color.a = (w1 & 0x000000FF) >>  0;
+                break;
+             case 60: /* SET_COMBINE */
+                set_combine();
+                break;
+             case 61: /* SET_TEXTURE_IMAGE */
+                ti_format  = (w1 & 0x00E00000) >> (53 - 32);
+                ti_size    = (w1 & 0x00180000) >> (51 - 32);
+                ti_width   = (w1 & 0x000003FF) >> (32 - 32);
+                ti_address = (w2 & 0x03FFFFFF) >> ( 0 -  0);
+                /* ti_address &= 0x00FFFFFF; // physical memory limit, enforced later */
+                ++ti_width;
+                break;
+             case 62: /* SET_DEPTH_MASK_IMAGE */
+                zb_address = w2 & 0x03FFFFFF;
+                /* zb_address &= 0x00FFFFFF; */
+                break;
+             case 63: /* SET_COLOR_IMAGE */
+                fb_format  = (w1 & 0x00E00000) >> (53 - 32);
+                fb_size    = (w1 & 0x00180000) >> (51 - 32);
+                fb_width   = (w1 & 0x000003FF) >> (32 - 32);
+                fb_address = (w2 & 0x03FFFFFF) >> ( 0 -  0);
+                ++fb_width;
+                /* fb_address &= 0x00FFFFFF; */
+                break;
+             case 0x00:
+                noop();
+                break;
+          }
+       }
+       cmd_cur += cmd_length;
     };
 exit_a:
     cmd_ptr = 0;
@@ -275,42 +426,34 @@ static void noop(void)
 
 static void tri_noshade(void)
 {
-    draw_triangle(SHADE_NO, TEXTURE_NO, ZBUFFER_NO);
 }
 
 static void tri_noshade_z(void)
 {
-    draw_triangle(SHADE_NO, TEXTURE_NO, ZBUFFER_YES);
 }
 
 static void tri_tex(void)
 {
-    draw_triangle(SHADE_NO, TEXTURE_YES, ZBUFFER_NO);
 }
 
 static void tri_tex_z(void)
 {
-    draw_triangle(SHADE_NO, TEXTURE_YES, ZBUFFER_YES);
 }
 
 static void tri_shade(void)
 {
-    draw_triangle(SHADE_YES, TEXTURE_NO, ZBUFFER_NO);
 }
 
 static void tri_shade_z(void)
 {
-    draw_triangle(SHADE_YES, TEXTURE_NO, ZBUFFER_YES);
 }
 
 static void tri_texshade(void)
 {
-    draw_triangle(SHADE_YES, TEXTURE_YES, ZBUFFER_NO);
 }
 
 static void tri_texshade_z(void)
 {
-    draw_triangle(SHADE_YES, TEXTURE_YES, ZBUFFER_YES);
 }
 
 static void tex_rect(void)
@@ -719,60 +862,27 @@ static void sync_tile(void)
 
 static void sync_full(void)
 {
-    z64gl_command = 0; /* wtf is this for */
-    *gfx_info.MI_INTR_REG |= DP_INTERRUPT;
-    gfx_info.CheckInterrupts();
+   z64gl_command = 0; /* wtf is this for */
+   *gfx_info.MI_INTR_REG |= DP_INTERRUPT;
+   gfx_info.CheckInterrupts();
 }
 
 static void set_key_gb(void)
 {
-    key_width.g  = (cmd_data[cmd_cur + 0].UW32[0] & 0x00FFF000) >> 12;
-    key_width.b  = (cmd_data[cmd_cur + 0].UW32[0] & 0x00000FFF) >>  0;
-    key_center.g = (cmd_data[cmd_cur + 0].UW32[1] & 0xFF000000) >> 24;
-    key_scale.g  = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FF0000) >> 16;
-    key_center.b = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FF00) >>  8;
-    key_scale.b  = (cmd_data[cmd_cur + 0].UW32[1] & 0x000000FF) >>  0;
 }
 
 static void set_key_r(void)
 {
-    key_width.r  = (cmd_data[cmd_cur + 0].UW32[1] & 0x0FFF0000) >> 16;
-    key_center.r = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FF00) >>  8;
-    key_scale.r  = (cmd_data[cmd_cur + 0].UW32[1] & 0x000000FF) >>  0;
 }
 
-static void set_convert(void)
-{
-   UINT32 w1 = cmd_data[cmd_cur + 0].UW32[0];
-   UINT32 w2 = cmd_data[cmd_cur + 0].UW32[1];
-
-   INT32 k0 = (w1 >> 13) & 0x1ff;
-   INT32 k1 = (w1 >> 4) & 0x1ff;
-   INT32 k2 = ((w1 & 0xf) << 5) | ((w2 >> 27) & 0x1f);
-   INT32 k3 = (w2 >> 18) & 0x1ff;
-   k0_tf = (SIGN(k0, 9) << 1) + 1;
-   k1_tf = (SIGN(k1, 9) << 1) + 1;
-   k2_tf = (SIGN(k2, 9) << 1) + 1;
-   k3_tf = (SIGN(k3, 9) << 1) + 1;
-   k4 = (w2 >> 9) & 0x1ff;
- 	k5 = w2 & 0x1ff;
-}
+static void set_convert(void) { }
 
 static void set_scissor(void)
 {
-    __clip.xh   = (cmd_data[cmd_cur + 0].UW32[0] & 0x00FFF000) >> (44 - 32);
-    __clip.yh   = (cmd_data[cmd_cur + 0].UW32[0] & 0x00000FFF) >> (32 - 32);
-    scfield   = (cmd_data[cmd_cur + 0].UW32[1] & 0x02000000) >> (25 -  0);
-    sckeepodd = (cmd_data[cmd_cur + 0].UW32[1] & 0x01000000) >> (24 -  0);
-    __clip.xl   = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FFF000) >> (12 -  0);
-    __clip.yl   = (cmd_data[cmd_cur + 0].UW32[1] & 0x00000FFF) >> ( 0 -  0);
 }
 
 static void set_prim_depth(void)
 {
-    primitive_z       = (cmd_data[cmd_cur + 0].UW32[1] & 0xFFFF0000) >> 16;
-    primitive_delta_z = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FFFF) >>  0;
-    primitive_z = (primitive_z & 0x7FFF) << 16; /* angrylion does this why? */
 }
 
 static void set_other_modes(void)
@@ -891,14 +1001,10 @@ static void load_block(void)
 
 static void load_tlut(void)
 {
-    tile_tlut_common_cs_decoder(
-        cmd_data[cmd_cur + 0].UW32[0], cmd_data[cmd_cur + 0].UW32[1]);
 }
 
 static void load_tile(void)
 {
-    tile_tlut_common_cs_decoder(
-        cmd_data[cmd_cur + 0].UW32[0], cmd_data[cmd_cur + 0].UW32[1]);
 }
 
 static void set_tile(void)
@@ -926,9 +1032,7 @@ static void set_tile(void)
 
 static void fill_rect(void)
 {
-    int xl, yl, xh, yh;
     int xlint, xhint;
-
     int ycur, ylfar;
     int yllimit, yhlimit;
     int invaly;
@@ -938,11 +1042,10 @@ static void fill_rect(void)
     register int j, k;
     const i32 clipxlshift = __clip.xl << 1;
     const i32 clipxhshift = __clip.xh << 1;
-
-    xl = (cmd_data[cmd_cur + 0].UW32[0] & 0x00FFF000) >> (44 - 32);
-    yl = (cmd_data[cmd_cur + 0].UW32[0] & 0x00000FFF) >> (32 - 32);
-    xh = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FFF000) >> (12 -  0);
-    yh = (cmd_data[cmd_cur + 0].UW32[1] & 0x00000FFF) >> ( 0 -  0);
+    int xl = (cmd_data[cmd_cur + 0].UW32[0] & 0x00FFF000) >> (44 - 32);
+    int yl = (cmd_data[cmd_cur + 0].UW32[0] & 0x00000FFF) >> (32 - 32);
+    int xh = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FFF000) >> (12 -  0);
+    int yh = (cmd_data[cmd_cur + 0].UW32[1] & 0x00000FFF) >> ( 0 -  0);
 
     yl |= (other_modes.cycle_type & 2) ? 3 : 0; /* FILL or COPY */
 
@@ -1065,41 +1168,22 @@ static void fill_rect(void)
 
 static void set_fill_color(void)
 {
-    fill_color = cmd_data[cmd_cur + 0].UW32[1];
 }
 
 static void set_fog_color(void)
 {
-    fog_color.r = (cmd_data[cmd_cur + 0].UW32[1] & 0xFF000000) >> 24;
-    fog_color.g = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FF0000) >> 16;
-    fog_color.b = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FF00) >>  8;
-    fog_color.a = (cmd_data[cmd_cur + 0].UW32[1] & 0x000000FF) >>  0;
 }
 
 static void set_blend_color(void)
 {
-    blend_color.r = (cmd_data[cmd_cur + 0].UW32[1] & 0xFF000000) >> 24;
-    blend_color.g = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FF0000) >> 16;
-    blend_color.b = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FF00) >>  8;
-    blend_color.a = (cmd_data[cmd_cur + 0].UW32[1] & 0x000000FF) >>  0;
 }
 
 static void set_prim_color(void)
 {
-    min_level          = (cmd_data[cmd_cur + 0].UW32[0] & 0x00001F00) >>(40-32);
-    primitive_lod_frac = (cmd_data[cmd_cur + 0].UW32[0] & 0x000000FF) >>(32-32);
-    prim_color.r       = (cmd_data[cmd_cur + 0].UW32[1] & 0xFF000000) >> 24;
-    prim_color.g       = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FF0000) >> 16;
-    prim_color.b       = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FF00) >>  8;
-    prim_color.a       = (cmd_data[cmd_cur + 0].UW32[1] & 0x000000FF) >>  0;
 }
 
 static void set_env_color(void)
 {
-    env_color.r = (cmd_data[cmd_cur + 0].UW32[1] & 0xFF000000) >> 24;
-    env_color.g = (cmd_data[cmd_cur + 0].UW32[1] & 0x00FF0000) >> 16;
-    env_color.b = (cmd_data[cmd_cur + 0].UW32[1] & 0x0000FF00) >>  8;
-    env_color.a = (cmd_data[cmd_cur + 0].UW32[1] & 0x000000FF) >>  0;
 }
 
 static void set_combine(void)
@@ -1160,28 +1244,14 @@ static void set_combine(void)
 
 static void set_texture_image(void)
 {
-    ti_format  = (cmd_data[cmd_cur + 0].UW32[0] & 0x00E00000) >> (53 - 32);
-    ti_size    = (cmd_data[cmd_cur + 0].UW32[0] & 0x00180000) >> (51 - 32);
-    ti_width   = (cmd_data[cmd_cur + 0].UW32[0] & 0x000003FF) >> (32 - 32);
-    ti_address = (cmd_data[cmd_cur + 0].UW32[1] & 0x03FFFFFF) >> ( 0 -  0);
- /* ti_address &= 0x00FFFFFF; // physical memory limit, enforced later */
-    ++ti_width;
 }
 
 static void set_mask_image(void)
 {
-    zb_address = cmd_data[cmd_cur + 0].UW32[1] & 0x03FFFFFF;
- /* zb_address &= 0x00FFFFFF; */
 }
 
 static void set_color_image(void)
 {
-    fb_format  = (cmd_data[cmd_cur + 0].UW32[0] & 0x00E00000) >> (53 - 32);
-    fb_size    = (cmd_data[cmd_cur + 0].UW32[0] & 0x00180000) >> (51 - 32);
-    fb_width   = (cmd_data[cmd_cur + 0].UW32[0] & 0x000003FF) >> (32 - 32);
-    fb_address = (cmd_data[cmd_cur + 0].UW32[1] & 0x03FFFFFF) >> ( 0 -  0);
-    ++fb_width;
- /* fb_address &= 0x00FFFFFF; */
 }
 
 static NOINLINE void draw_triangle(int shade, int texture, int zbuffer)
